-- Alterações SELECT_RESUMO_CUSTO
create or alter procedure SELECT_RESUMO_CUSTO (
    DATA_INI date,
    DATA_FIM date,
    EMPRESA_INI integer,
    EMPRESA_FIM integer,
    GRUPO_INI integer,
    GRUPO_FIM integer,
    CUSTO_INI integer,
    CUSTO_FIM integer)
returns (
    GRUPO varchar(60),
    CUSTO varchar(60),
    NOME_FORNECEDOR varchar(60),
    VLR_PAGAR double precision,
    VLR_JUROS double precision,
    VLR_DESC double precision,
    VLR_TOTAL double precision,
    PERC double precision)
as
declare variable TOTAL double precision;
BEGIN
  SELECT SUM(B.BCP_VALOR)
  FROM CENTRO_CUSTO C,
       PARCELA_CONTA_PAGAR P,
       BAIXA_CONTA_PAGAR B,
       CONTA_PAGAR CP,
       PESSOA PE
  WHERE B.PCP_CODIGO = P.PCP_CODIGO
    AND B.CPR_CODIGO = P.CPR_CODIGO
    AND P.CPR_CODIGO = CP.CPR_CODIGO
    AND P.CC_CODIGO = C.CC_CODIGO
    AND CP.FORN_CODIGO = PE.PES_CODIGO
    AND B.BCP_DATA BETWEEN :DATA_INI AND :DATA_FIM
    AND P.CC_CODIGO BETWEEN :CUSTO_INI AND :CUSTO_FIM
    AND CP.EMP_CODIGO BETWEEN :EMPRESA_INI AND :EMPRESA_FIM
    AND C.GCC_CODIGO BETWEEN :GRUPO_INI AND :GRUPO_FIM
  INTO :TOTAL;

  FOR
    SELECT C.CC_NOME,
           MIN(G.GCC_NOME) AS GCC_NOME, -- ou MAX se for necess?rio
           MIN(PE.PES_NOME) AS PES_NOME,
           SUM(B.BCP_JUROS) AS VLR_JUROS,
           SUM(B.BCP_DESCONTO) AS VLR_DESC,
           SUM(B.BCP_VALOR) AS VLR_TOTAL
    FROM CENTRO_CUSTO C,
         PARCELA_CONTA_PAGAR P,
         BAIXA_CONTA_PAGAR B,
         CONTA_PAGAR CP,
         GRUPO_CENTRO_CUSTO G,
         PESSOA PE
    WHERE B.PCP_CODIGO = P.PCP_CODIGO
      AND B.CPR_CODIGO = P.CPR_CODIGO
      AND P.CPR_CODIGO = CP.CPR_CODIGO
      AND P.CC_CODIGO = C.CC_CODIGO
      AND C.GCC_CODIGO = G.GCC_CODIGO
      AND CP.FORN_CODIGO = PE.PES_CODIGO
      AND B.BCP_DATA BETWEEN :DATA_INI AND :DATA_FIM
      AND P.CC_CODIGO BETWEEN :CUSTO_INI AND :CUSTO_FIM
      AND CP.EMP_CODIGO BETWEEN :EMPRESA_INI AND :EMPRESA_FIM
      AND C.GCC_CODIGO BETWEEN :GRUPO_INI AND :GRUPO_FIM
    GROUP BY C.CC_NOME
    INTO :CUSTO,
         :GRUPO,
         :NOME_FORNECEDOR,
         :VLR_JUROS,
         :VLR_DESC,
         :VLR_TOTAL
  DO
  BEGIN
    VLR_PAGAR = VLR_TOTAL + VLR_DESC - VLR_JUROS;
    PERC = (VLR_TOTAL * 100) / TOTAL;
    SUSPEND;
  END
END;

COMMIT;

-- Alterações na SELECT_CTA_RECEBER
CREATE OR ALTER PROCEDURE SELECT_CTA_RECEBER (
    DATA_INI DATE,
    DATA_FIM DATE,
    VENC_INI DATE,
    VENC_FIM DATE,
    CLIENTE_INI INTEGER,
    CLIENTE_FIM INTEGER,
    DOC_INI INTEGER,
    DOC_FIM INTEGER,
    PORT_INI INTEGER,
    PORT_FIM INTEGER,
    EMPRESA_INI INTEGER,
    EMPRESA_FIM INTEGER,
    GCLIENTE_INI INTEGER,
    GCLIENTE_FIM INTEGER)
RETURNS (
    DOCUMENTO VARCHAR(25),
    NOME_DOC VARCHAR(60),
    DT_COMPRA DATE,
    DT_PAGTO DATE,
    VENCIMENTO DATE,
    NOME_CLI VARCHAR(60),
    NOME_PORT VARCHAR(60),
    CODE_EMP INTEGER,
    VALOR DOUBLE PRECISION,
    VALOR_PAGO DOUBLE PRECISION,
    SALDO DOUBLE PRECISION,
    SITUACAO VARCHAR(3),
    COMPLEMENTO VARCHAR(120),
    DT_BAIXA DATE)
AS
DECLARE VARIABLE CODE INTEGER;
DECLARE VARIABLE CODE_CR INTEGER;
DECLARE VARIABLE CODE_CLI INTEGER;
DECLARE VARIABLE CODE_TD INTEGER;
DECLARE VARIABLE CODE_PORT INTEGER;
DECLARE VARIABLE TP_DOC VARCHAR(1);
DECLARE VARIABLE CODE_END INTEGER;
DECLARE VARIABLE CODE_FUN INTEGER;
DECLARE VARIABLE NUM_ROWS INTEGER;
BEGIN
  FOR
    SELECT
         PCR.CR_CODIGO, 
         PCR.PCR_CODIGO,
         CR.EMP_CODIGO,
         CR.CLI_CODIGO,
         CAST(CR.CR_DATA_CADASTRO AS DATE),
         PCR.PCR_DOCUMENTO,
         PCR.TD_CODIGO,
         PCR.PORT_CODIGO,
         PCR.PCR_DATA_VENCIMENTO,
         PCR.PCR_VALOR_PARCELA,
         PCR.PCR_SITUACAO,
         PCR.PCR_COMPLEMENTO
    FROM
        CONTA_RECEBER CR,
        PARCELA_CONTA_RECEBER PCR,
        CLIENTE C
    WHERE
        CR.CR_CODIGO = PCR.CR_CODIGO
    AND CR.CLI_CODIGO = C.CLI_CODIGO
    AND C.GC_CODIGO BETWEEN :GCLIENTE_INI AND :GCLIENTE_FIM
    AND CAST(CR.CR_DATA_CADASTRO AS DATE) BETWEEN :DATA_INI AND :DATA_FIM
    AND PCR.PCR_DATA_VENCIMENTO BETWEEN :VENC_INI AND :VENC_FIM
    AND CR.CLI_CODIGO BETWEEN :CLIENTE_INI AND :CLIENTE_FIM
    AND PCR.TD_CODIGO BETWEEN :DOC_INI AND :DOC_FIM
    AND PCR.PORT_CODIGO BETWEEN :PORT_INI AND :PORT_FIM
    AND PCR.PCR_SITUACAO NOT IN ('C','E','F','P','R')
   INTO
        :CODE_CR, 
        :CODE,
        :CODE_EMP,
        :CODE_CLI,
        :DT_COMPRA, 
        :DOCUMENTO,
        :CODE_TD,
        :CODE_PORT,
        :VENCIMENTO,
        :VALOR,
        :SITUACAO,
        :COMPLEMENTO
   DO
   BEGIN
     SELECT
         PORT_NOME
     FROM
         PORTADOR
     WHERE
         PORT_CODIGO = :CODE_PORT
     INTO
         :NOME_PORT;

     SELECT
         TD_NOME
     FROM
         TIPO_DOCUMENTO
     WHERE
         TD_CODIGO = :CODE_TD

     INTO
         :NOME_DOC;

     SELECT
         PES_NOME
     FROM
         PESSOA
     WHERE
         PES_CODIGO = :CODE_CLI
     INTO
         :NOME_CLI;


     SELECT
         MAX(CAST(BCR_DATA_CAD AS DATE)),
         SUM(BCR_VALOR)
     FROM
         BAIXA_CONTA_RECEBER
     WHERE
        PCR_CODIGO = :CODE
     INTO
        :DT_PAGTO,
        :VALOR_PAGO;

     IF (VALOR_PAGO IS NULL) THEN
       VALOR_PAGO = 0;

     SALDO = VALOR - VALOR_PAGO;


     IF (CODE_EMP BETWEEN :EMPRESA_INI AND :EMPRESA_FIM) THEN
       SUSPEND;
    END
END;

COMMIT;

create or alter procedure SELECT_CTA_RECEBIDAS (
    DATA_INI date,
    DATA_FIM date,
    PAGTO_INI date,
    PAGTO_FIM date,
    CLIENTE_INI integer,
    CLIENTE_FIM integer,
    DOC_INI integer,
    DOC_FIM integer,
    PORT_INI integer,
    PORT_FIM integer,
    EMPRESA_INI integer,
    EMPRESA_FIM integer,
    GCLIENTE_INI INTEGER,
    GCLIENTE_FIM INTEGER)	
returns (
    DOCUMENTO varchar(25),
    NOME_DOC varchar(50),
    DT_COMPRA date,
    DT_PAGTO date,
    VENCIMENTO date,
    NOME_CLI varchar(60),
    NOME_PORT varchar(60),
    CODE_EMP integer,
    VALOR double precision,
    VALOR_PAGO double precision,
    SALDO double precision,
    SITUACAO varchar(3),
    COMPLEMENTO varchar(120),
    DT_BAIXA date)
as
declare variable CODE integer;
declare variable CODE_CLI integer;
declare variable CODE_TD integer;
declare variable CODE_PORT integer;
declare variable TP_DOC varchar(1);
declare variable CODE_CR integer;
declare variable CODE_FUN integer;
declare variable NUM_ROWS integer;
BEGIN
  FOR
    SELECT
        PCR.CR_CODIGO,
        PCR.PCR_CODIGO,
        CR.EMP_CODIGO,
        CR.CLI_CODIGO,
        CAST(CR.CR_DATA_CADASTRO AS DATE),
        PCR.PCR_DOCUMENTO,
        PCR.PCR_DATA_VENCIMENTO,
        PCR.PCR_VALOR_PARCELA,
        PCR.PCR_SITUACAO,
        PCR.PCR_COMPLEMENTO,
        PCR.TD_CODIGO,
        PCR.PORT_CODIGO,
        MAX(BCR.BCR_DATA),
        MAX(CAST(BCR.BCR_DATA_CAD AS DATE)) AS DATA_BAIXA,
        SUM(BCR.BCR_VALOR)
   FROM
       CONTA_RECEBER CR,
       PARCELA_CONTA_RECEBER PCR,
       BAIXA_CONTA_RECEBER BCR,
	   CLIENTE C
   WHERE
       CR.CR_CODIGO = PCR.CR_CODIGO
   AND CR.CLI_CODIGO = C.CLI_CODIGO
   AND C.GC_CODIGO BETWEEN :GCLIENTE_INI AND :GCLIENTE_FIM	   
   AND PCR.CR_CODIGO = BCR.CR_CODIGO
   AND PCR.PCR_CODIGO = BCR.PCR_CODIGO
   AND PCR.PCR_SITUACAO NOT IN('E','A')
   AND  CAST(CR.CR_DATA_CADASTRO AS DATE) BETWEEN :DATA_INI AND :DATA_FIM
   AND  BCR.BCR_DATA BETWEEN :PAGTO_INI AND :PAGTO_FIM
   AND  CR.CLI_CODIGO BETWEEN :CLIENTE_INI AND :CLIENTE_FIM
   AND  PCR.TD_CODIGO BETWEEN :DOC_INI AND :DOC_FIM
   AND  PCR.PORT_CODIGO BETWEEN :PORT_INI AND :PORT_FIM
   AND  CR.EMP_CODIGO BETWEEN :EMPRESA_INI AND :EMPRESA_FIM
   GROUP BY
        PCR.CR_CODIGO,
        PCR.PCR_CODIGO,
        CR.EMP_CODIGO,
        CR.CLI_CODIGO, 
        CR.CR_DATA_CADASTRO,
        PCR.PCR_DOCUMENTO,
        PCR.PCR_DATA_VENCIMENTO,
        PCR.PCR_VALOR_PARCELA,
        PCR.PCR_SITUACAO,
        PCR.PCR_COMPLEMENTO,
        PCR.TD_CODIGO,
        PCR.PORT_CODIGO
   INTO
        :CODE_CR,
        :CODE,
        :CODE_EMP,
        :CODE_CLI,
        :DT_COMPRA, 
        :DOCUMENTO,
        :VENCIMENTO,
        :VALOR,
        :SITUACAO,
        :COMPLEMENTO,
        :CODE_TD,
        :CODE_PORT,
        :DT_PAGTO,
        :DT_BAIXA,
        :VALOR_PAGO

   DO
   BEGIN
     SELECT
         PORT_NOME
     FROM
         PORTADOR
     WHERE
         PORT_CODIGO = :CODE_PORT
     INTO
         :NOME_PORT;

     SELECT
         TD_NOME
     FROM
         TIPO_DOCUMENTO
     WHERE
         TD_CODIGO = :CODE_TD

     INTO
         :NOME_DOC;

     SELECT
         PES_NOME
     FROM
         PESSOA
     WHERE
         PES_CODIGO = :CODE_CLI
     INTO
         :NOME_CLI;

     if (SITUACAO = 'L') then
       SALDO = VALOR - VALOR_PAGO;
     ELSE
       SALDO = 0;
     if (SALDO < 0) then
       SALDO = 0;
     SUSPEND;
    END
END;

COMMIT;

-- Alterações na tabela empresa
ALTER TABLE empresa 
ADD EMP_NSU_ULTIMO VARCHAR(16);
COMMIT;

UPDATE empresa 
SET EMP_NSU_ULTIMO = '000000000000000';
COMMIT;

ALTER TABLE empresa 
ADD EMP_NSU_MAXIMO VARCHAR(16);
COMMIT;

ALTER TABLE empresa 
ADD EMP_NSU_DATAHORA TIMESTAMP;
COMMIT;

CREATE TABLE DFE_NF (
    DFE_NSU                VARCHAR(18),
    DFE_XML                BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    DFE_TIPO               VARCHAR(18),
    DFE_CHAVE              VARCHAR(45),
    DFE_EMITENTE_CNPJ      VARCHAR(15),
    DFE_EMITENTE_NOME      VARCHAR(80),
    DFE_VALOR_NF           DOUBLE PRECISION,
    DFE_DATA_HORA_EMISSAO  TIMESTAMP,
    DFE_PROTOCOLO          VARCHAR(20),
    DFE_SITUACAO           INTEGER,
    DFE_NUMERO_NF          INTEGER,
    DFE_SERIE              INTEGER,
    DFE_MODELO             INTEGER,
    DFE_COD_UF             INTEGER,
    DFE_COD_IBGE           INTEGER,
    DFE_VALOR_DESCONTO     DOUBLE PRECISION,
    DFE_VALOR_TOTAL        DOUBLE PRECISION,
    DFE_MAX_NSU            VARCHAR(20),
    DFE_STATUS             VARCHAR(15),
    DFE_SELECIONADO        VARCHAR(1)
);

COMMIT;
-- Procedimento para remover resumos duplicados

CREATE OR ALTER PROCEDURE SELECT_REMOVE_RESUMOS_NF
AS
DECLARE VARIABLE V_DFE_CHAVE VARCHAR(50);
BEGIN
  -- Criar um cursor para iterar sobre as chaves duplicadas
  FOR 
    SELECT 
        DFE_CHAVE 
    FROM 
        DFE_NF 
    GROUP BY 
        DFE_CHAVE 
    HAVING 
        COUNT(*) > 1
  INTO 
    :V_DFE_CHAVE
  DO
  BEGIN
    -- Verificar e excluir os registros do tipo "Resumo"
    DELETE FROM DFE_NF 
    WHERE 
        DFE_CHAVE = :V_DFE_CHAVE 
        AND DFE_TIPO = 'Resumo';
  END
END;

COMMIT;

-- Atualização ou inserção na tabela PARAMETRO
UPDATE OR INSERT INTO PARAMETRO 
    (PAR_CODIGO, GP_CODIGO, PAR_DESCRICAO, PAR_TIPO_REGISTRO, PAR_MASCARA, PAR_USO, PAR_VALOR, PAR_OBSERVACAO)
VALUES 
    (50, 0, 'URL API DFE', '2', NULL, 0, 'http://herasis.ddns.net:15095/api', 
    CAST('A configuração desse parâmetro define a URL base_name para acesso a api que conecta aos web-services da Sefaz' 
    AS BLOB SUB_TYPE 0 SEGMENT SIZE 80));
COMMIT;

create or alter procedure RELAT_DEMONST_FINANCEIRO (
    DATA_INI date,
    DATA_FIM date,
    EMP_INI integer,
    EMP_FIM integer)
returns (
    TIPO_CONTA varchar(60),
    OPERACAO varchar(60),
    DESPESA varchar(60),
    TIPO varchar(60),
    VALOR_TOTAL double precision)
as
BEGIN
  FOR
    SELECT
      'CONTAS RECEBIDAS' AS TIPO_CONTA,
      'CREDITO' AS "OPERACAO",
      'RECEITA' AS DESPESA,
      'BAIXA CONTAS A RECEBER' AS TIPO,
      SUM(PCR.PCR_VALOR_PARCELA)
    
    FROM
      PARCELA_CONTA_RECEBER PCR,
      BAIXA_CONTA_RECEBER BCR,
      CONTA_RECEBER CR
    
    WHERE
        PCR.CR_CODIGO = BCR.CR_CODIGO
    AND PCR.PCR_CODIGO = BCR.PCR_CODIGO
    AND PCR.CR_CODIGO = CR.CR_CODIGO
    AND BCR.CR_CODIGO = CR.CR_CODIGO
    AND PCR.PCR_SITUACAO = 'P'
    AND CR.EMP_CODIGO BETWEEN :EMP_INI AND :EMP_FIM
    AND BCR.BCR_DATA BETWEEN :DATA_INI AND :DATA_FIM

  UNION
    SELECT
      'CONTAS PAGAS' AS TIPO_CONTA,
      'DEBITO' AS "OPERACAO",
      GCC.GCC_NOME AS DESPESA,
      CC.CC_NOME AS TIPO,
      -1 * SUM(PCP.PCP_VALOR_PARCELA)
    
    FROM
      PARCELA_CONTA_PAGAR PCP,
      BAIXA_CONTA_PAGAR BCP,
      CONTA_PAGAR CP,
      CENTRO_CUSTO CC,
      GRUPO_CENTRO_CUSTO GCC
    
    WHERE
        PCP.CPR_CODIGO = BCP.CPR_CODIGO
    AND PCP.PCP_CODIGO = BCP.PCP_CODIGO
    AND PCP.CPR_CODIGO = CP.CPR_CODIGO
    AND BCP.CPR_CODIGO = CP.CPR_CODIGO
    AND PCP.CC_CODIGO = CC.CC_CODIGO
    AND CC.GCC_CODIGO = GCC.GCC_CODIGO
    AND PCP.PCP_SITUACAO = 'P'
    AND CP.EMP_CODIGO BETWEEN :EMP_INI AND :EMP_FIM
    AND BCP.BCP_DATA BETWEEN :DATA_INI AND :DATA_FIM

    GROUP BY
        GCC.GCC_NOME,
        CC.CC_NOME

    INTO
        :TIPO_CONTA,
        :OPERACAO,
        :DESPESA,
        :TIPO,
        :VALOR_TOTAL
   DO
   BEGIN
      SUSPEND;
   END
END;

COMMIT;

UPDATE OR INSERT INTO FORMULARIO (FORM_CODIGO, FORM_NOME, FORM_TIPO, MDL_CODIGO)
                          VALUES (99, 'Relatório de Demonstrativo Financeiro', 'C', 4)
                        MATCHING (FORM_CODIGO);

COMMIT;

UPDATE OR INSERT INTO FORM_ACAO (ACAO_CODIGO, FORM_CODIGO)
                         VALUES (1, 99)
                       MATCHING (ACAO_CODIGO, FORM_CODIGO);

COMMIT;

UPDATE OR INSERT INTO FORM_ACAO_PERFIL (ACAO_CODIGO, FORM_CODIGO, PERF_CODIGO)
                                VALUES (1, 99, 1)
                              MATCHING (ACAO_CODIGO, FORM_CODIGO, PERF_CODIGO);
COMMIT;

UPDATE OR INSERT INTO PARAMETRO 
    (PAR_CODIGO, GP_CODIGO, PAR_DESCRICAO, PAR_TIPO_REGISTRO, PAR_MASCARA, PAR_USO, PAR_VALOR, PAR_OBSERVACAO)
VALUES 
    (47, 0, 'URL API HERA TALK', '0', NULL, 0, 'HTTP://146.235.51.220:15071', 
    CAST('Configuração da URL para acesso a API do WhatsApp no Servidor do HeraZap' 
    AS BLOB SUB_TYPE 0 SEGMENT SIZE 80));
    
COMMIT;

UPDATE OR INSERT INTO PARAMETRO 
    (PAR_CODIGO, GP_CODIGO, PAR_DESCRICAO, PAR_TIPO_REGISTRO, PAR_MASCARA, PAR_USO, PAR_VALOR, PAR_OBSERVACAO)
VALUES 
    (48, 0, 'CHAVE API HERA TALK', '0', NULL, 0, '', 
    CAST('Campo para ser preenchido com a Chave, Nome da Conexão do WhatsApp conectado no HeraLav' 
    AS BLOB SUB_TYPE 0 SEGMENT SIZE 80));

COMMIT;

UPDATE OR INSERT INTO PARAMETRO
    (PAR_CODIGO, GP_CODIGO, PAR_DESCRICAO, PAR_TIPO_REGISTRO, PAR_MASCARA, PAR_USO, PAR_VALOR, PAR_OBSERVACAO)
VALUES 
    (51, 0, 'NF. DESCRICAO PROD. COM REF', '0', NULL, 0, '000001',
    CAST('Configuração da descrição do produto na NF, se será acrescido a referência digitada após a descrição. 1 Para sim, e 2 para Não.'
    AS BLOB SUB_TYPE 0 SEGMENT SIZE 80));


COMMIT WORK;

